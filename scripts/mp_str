#!/work/scratch/as41vomu/mambaforge/envs/atomic/bin/python
import argparse
import os
import warnings
from mp_api.client import MPRester
from pymatgen.core import Structure

# Suppress the warning.
warnings.filterwarnings("ignore")

def download_structure(mid_list, file_format='cif', output_dir='.'):
    mpkey = os.environ['mp_key']
    
    # Ensure the output directory exists or create it.
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    for mid in mid_list:
        full_mid = 'mp-' + mid  # Prepend "mp-" to the provided ID.
        
        with MPRester(mpkey) as m:
            structure = m.get_structure_by_material_id(full_mid)
            
            # Construct the output file path.
            if file_format == 'poscar':
                filename = os.path.join(output_dir, f'{full_mid}.vasp')
            else:  # default to 'cif'
                filename = os.path.join(output_dir, f'{full_mid}.cif')
            
            structure.to(filename=filename)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Download and save the materials project structure given one or more Material IDs (MIDs) in either POSCAR or CIF format.")
    
    parser.add_argument('mid', type=str, nargs='+', help='One or more numeric parts of Material IDs from the Materials Project (e.g., for mp-554278, provide 554278).')
    parser.add_argument('file_format', type=str, choices=['poscar', 'cif'], help='Desired format: poscar or cif.')
    parser.add_argument('--output_dir', type=str, default='.', help='Directory to save the downloaded structures. Default is current directory.')
    
    args = parser.parse_args()
    
    download_structure(args.mid, args.file_format, args.output_dir)

